// This is an adjusted version of the default settings. Why adjusted? Because we
// don't accidentally want to re-format code based on new default values.
// https://github.com/millermedeiros/esformatter/blob/master/lib/preset/default.json
{
  "esformatter": {
    "allowShebang": true
  },

  "indent": {
    "alignComments": true,
    "ArrayExpression": 1,
    "ArrayPattern": 1,
    "ArrowFunctionExpression": 1,
    "AssignmentExpression": 1,
    "AssignmentExpression.BinaryExpression": 1,
    "AssignmentExpression.LogicalExpression": 1,
    "AssignmentExpression.UnaryExpression": 1,
    "CallExpression": 1,
    "CallExpression.BinaryExpression": 1,
    "CallExpression.LogicalExpression": 1,
    "CallExpression.UnaryExpression": 1,
    "CatchClause": 1,
    "ClassDeclaration": 1,
    "ClassExpression": 1,
    "CommentInsideEmptyBlock": 1,
    "ConditionalExpression": 1,
    "DoWhileStatement": 1,
    "ForInStatement": 1,
    "ForOfStatement": 1,
    "ForStatement": 1,
    "FunctionDeclaration": 1,
    "FunctionExpression": 1,
    "IfStatement": 1,
    "MemberExpression": 1,
    "MultipleVariableDeclaration": 2,
    "NewExpression": 1,
    "ObjectExpression": 1,
    "ObjectExpression.BinaryExpression": 1,
    "ObjectExpression.LogicalExpression": 1,
    "ObjectExpression.UnaryExpression": 1,
    "ObjectPattern": 1,
    "ParameterList": 1,
    "ReturnStatement": 0,
    "SingleVariableDeclaration": 0,
    "SwitchCase": 1,
    "SwitchStatement": 1,
    "TopLevelFunctionBlock": 1,
    "TryStatement": 1,
    "value": "  ",
    "VariableDeclaration.BinaryExpression": 1,
    "VariableDeclaration.LogicalExpression": 1,
    "VariableDeclaration.UnaryExpression": 1,
    "WhileStatement": 1
  },


  "lineBreak": {
    "value": "\n",

    "before": {
      "ArrayPatternClosing": 0,
      "ArrayPatternComma": 0,
      "ArrayPatternOpening": 0,
      "ArrowFunctionExpressionArrow": 0,
      "ArrowFunctionExpressionClosingBrace": ">=1",
      "ArrowFunctionExpressionOpeningBrace": 0,
      "AssignmentExpression": ">=1",
      "AssignmentOperator": 0,
      "AssignmentPattern": 0,
      "BlockStatement": 0,
      "BreakKeyword": ">=1",
      "CallExpression": -1,
      "CallExpressionClosingParentheses": -1,
      "CallExpressionOpeningParentheses": 0,
      "CatchClosingBrace": ">=1",
      "CatchKeyword": 0,
      "CatchOpeningBrace": 0,
      "ClassClosingBrace": ">=1",
      "ClassDeclaration": ">=1",
      "ClassExpression": ">=1",
      "ClassOpeningBrace": 0,
      "ConditionalExpression": ">=1",
      "DeleteOperator": ">=1",
      "DoWhileStatement": ">=1",
      "DoWhileStatementClosingBrace": ">=1",
      "DoWhileStatementOpeningBrace": 0,
      "ElseIfStatement": 0,
      "ElseIfStatementClosingBrace": ">=1",
      "ElseIfStatementOpeningBrace": 0,
      "ElseStatement": 0,
      "ElseStatementClosingBrace": ">=1",
      "ElseStatementOpeningBrace": 0,
      "EmptyStatement": -1,
      "EndOfFile": -1,
      "ExportAllDeclaration": ">=1",
      "ExportDefaultDeclaration": ">=1",
      "ExportNamedDeclaration": ">=1",
      "FinallyClosingBrace": ">=1",
      "FinallyKeyword": -1,
      "FinallyOpeningBrace": 0,
      "ForInStatement": ">=1",
      "ForInStatementClosingBrace": ">=1",
      "ForInStatementExpressionClosing": 0,
      "ForInStatementExpressionOpening": 0,
      "ForInStatementOpeningBrace": 0,
      "ForOfStatement": ">=1",
      "ForOfStatementClosingBrace": ">=1",
      "ForOfStatementExpressionClosing": 0,
      "ForOfStatementExpressionOpening": 0,
      "ForOfStatementOpeningBrace": 0,
      "ForStatement": ">=1",
      "ForStatementClosingBrace": ">=1",
      "ForStatementExpressionClosing": "<2",
      "ForStatementExpressionOpening": 0,
      "ForStatementOpeningBrace": 0,
      "FunctionDeclaration": ">=1",
      "FunctionDeclarationClosingBrace": ">=1",
      "FunctionDeclarationOpeningBrace": 0,
      "FunctionExpression": -1,
      "FunctionExpressionClosingBrace": ">=1",
      "FunctionExpressionOpeningBrace": 0,
      "IfStatement": ">=1",
      "IfStatementClosingBrace": ">=1",
      "IfStatementOpeningBrace": 0,
      "IIFEClosingParentheses": 0,
      "LogicalExpression": -1,
      "MemberExpressionClosing": "<2",
      "MemberExpressionOpening": 0,
      "MemberExpressionPeriod": -1,
      "MethodDefinition": ">=1",
      "ObjectExpressionClosingBrace": ">=1",
      "ObjectPatternClosingBrace": 0,
      "ObjectPatternComma": 0,
      "ObjectPatternOpeningBrace": 0,
      "Property": ">=1",
      "PropertyValue": 0,
      "ReturnStatement": -1,
      "SwitchCaseColon": 0,
      "SwitchClosingBrace": ">=1",
      "SwitchOpeningBrace": 0,
      "ThisExpression": -1,
      "ThrowStatement": ">=1",
      "TryClosingBrace": ">=1",
      "TryKeyword": -1,
      "TryOpeningBrace": 0,
      "VariableDeclaration": ">=1",
      "VariableDeclarationSemiColon": 0,
      "VariableDeclarationWithoutInit": ">=1",
      "VariableName": ">=1",
      "VariableValue": 0,
      "WhileStatement": ">=1",
      "WhileStatementClosingBrace": ">=1",
      "WhileStatementOpeningBrace": 0
    },

    "after": {
      "ArrayPatternClosing": 0,
      "ArrayPatternComma": 0,
      "ArrayPatternOpening": 0,
      "ArrowFunctionExpressionArrow": 0,
      "ArrowFunctionExpressionClosingBrace": -1,
      "ArrowFunctionExpressionOpeningBrace": ">=1",
      "AssignmentExpression": ">=1",
      "AssignmentOperator": 0,
      "AssignmentPattern": 0,
      "BlockStatement": 0,
      "BreakKeyword": -1,
      "CallExpression": -1,
      "CallExpressionClosingParentheses": -1,
      "CallExpressionOpeningParentheses": -1,
      "CatchClosingBrace": ">=0",
      "CatchKeyword": 0,
      "CatchOpeningBrace": ">=1",
      "ClassClosingBrace": ">=1",
      "ClassDeclaration": ">=1",
      "ClassExpression": ">=1",
      "ClassOpeningBrace": ">=1",
      "ConditionalExpression": ">=1",
      "DeleteOperator": ">=1",
      "DoWhileStatement": ">=1",
      "DoWhileStatementClosingBrace": 0,
      "DoWhileStatementOpeningBrace": ">=1",
      "ElseIfStatement": ">=1",
      "ElseIfStatementClosingBrace": ">=1",
      "ElseIfStatementOpeningBrace": ">=1",
      "ElseStatement": ">=1",
      "ElseStatementClosingBrace": ">=1",
      "ElseStatementOpeningBrace": ">=1",
      "EmptyStatement": -1,
      "FinallyClosingBrace": ">=1",
      "FinallyKeyword": -1,
      "FinallyOpeningBrace": ">=1",
      "ForInStatement": ">=1",
      "ForInStatementClosingBrace": ">=1",
      "ForInStatementExpressionClosing": -1,
      "ForInStatementExpressionOpening": "<2",
      "ForInStatementOpeningBrace": ">=1",
      "ForOfStatement": ">=1",
      "ForOfStatementClosingBrace": ">=1",
      "ForOfStatementExpressionClosing": -1,
      "ForOfStatementExpressionOpening": "<2",
      "ForOfStatementOpeningBrace": ">=1",
      "ForStatement": ">=1",
      "ForStatementClosingBrace": ">=1",
      "ForStatementExpressionClosing": -1,
      "ForStatementExpressionOpening": "<2",
      "ForStatementOpeningBrace": ">=1",
      "FunctionDeclaration": ">=1",
      "FunctionDeclarationClosingBrace": ">=1",
      "FunctionDeclarationOpeningBrace": 1,
      "FunctionExpression": ">=1",
      "FunctionExpressionClosingBrace": -1,
      "FunctionExpressionOpeningBrace": 1,
      "IfStatement": ">=1",
      "IfStatementClosingBrace": ">=1",
      "IfStatementOpeningBrace": ">=1",
      "IIFEOpeningParentheses": 0,
      "LogicalExpression": -1,
      "MemberExpressionClosing": "<2",
      "MemberExpressionOpening": "<2",
      "MemberExpressionPeriod": 0,
      "MethodDefinition": ">=1",
      "ObjectExpressionOpeningBrace": ">=1",
      "ObjectPatternClosingBrace": 0,
      "ObjectPatternComma": 0,
      "ObjectPatternOpeningBrace": 0,
      "Property": 0,
      "PropertyName": 0,
      "ReturnStatement": -1,
      "SwitchCaseColon": ">=1",
      "SwitchClosingBrace": ">=1",
      "SwitchOpeningBrace": ">=1",
      "ThisExpression": 0,
      "ThrowStatement": ">=1",
      "TryClosingBrace": 0,
      "TryKeyword": -1,
      "TryOpeningBrace": ">=1",
      "VariableDeclaration": ">=1",
      "VariableDeclarationSemiColon": ">=1",
      "VariableValue": -1,
      "WhileStatement": ">=1",
      "WhileStatementClosingBrace": ">=1",
      "WhileStatementOpeningBrace": ">=1"
    }
  },


  "whiteSpace": {
    "value": " ",
    "removeTrailing": 1,

    "before": {
      "ArgumentComma": 0,
      "ArgumentList": 0,
      "ArrayExpressionClosing": 0,
      "ArrayExpressionComma": 0,
      "ArrayExpressionOpening": 0,
      "ArrayPatternClosing": 0,
      "ArrayPatternComma": 0,
      "ArrayPatternOpening": 1,
      "ArrowFunctionExpressionArrow": 1,
      "ArrowFunctionExpressionClosingBrace": 0,
      "ArrowFunctionExpressionOpeningBrace": 1,
      "AssignmentOperator": 1,
      "AssignmentPattern": 1,
      "BinaryExpression": 0,
      "BinaryExpressionOperator": 1,
      "BlockComment": 1,
      "CallExpression": -1,
      "CallExpressionClosingParentheses": -1,
      "CallExpressionOpeningParentheses": 0,
      "CatchClosingBrace": 1,
      "CatchKeyword": 1,
      "CatchOpeningBrace": 1,
      "CatchParameterList": 0,
      "ClassClosingBrace": 1,
      "ClassOpeningBrace": 1,
      "CommaOperator": 0,
      "ConditionalExpressionAlternate": 1,
      "ConditionalExpressionConsequent": 1,
      "DoWhileStatementClosingBrace": 1,
      "DoWhileStatementConditional": 1,
      "DoWhileStatementOpeningBrace": 1,
      "ElseIfStatementClosingBrace": 1,
      "ElseIfStatementOpeningBrace": 1,
      "ElseStatementClosingBrace": 1,
      "ElseStatementOpeningBrace": 1,
      "EmptyStatement": 0,
      "ExpressionClosingParentheses": 0,
      "FinallyClosingBrace": 1,
      "FinallyKeyword": -1,
      "FinallyOpeningBrace": 1,
      "ForInStatement": 1,
      "ForInStatementClosingBrace": 1,
      "ForInStatementExpressionClosing": 0,
      "ForInStatementExpressionOpening": 1,
      "ForInStatementOpeningBrace": 1,
      "ForOfStatement": 1,
      "ForOfStatementClosingBrace": 1,
      "ForOfStatementExpressionClosing": 0,
      "ForOfStatementExpressionOpening": 1,
      "ForOfStatementOpeningBrace": 1,
      "ForStatement": 1,
      "ForStatementClosingBrace": 1,
      "ForStatementExpressionClosing": 0,
      "ForStatementExpressionOpening": 1,
      "ForStatementOpeningBrace": 1,
      "ForStatementSemicolon": 0,
      "FunctionDeclarationClosingBrace": 1,
      "FunctionDeclarationOpeningBrace": 1,
      "FunctionExpressionClosingBrace": 1,
      "FunctionExpressionOpeningBrace": 1,
      "FunctionGeneratorAsterisk": 0,
      "FunctionName": 1,
      "IfStatementClosingBrace": 1,
      "IfStatementConditionalClosing": 0,
      "IfStatementConditionalOpening": 1,
      "IfStatementOpeningBrace": 1,
      "IIFEClosingParentheses": 0,
      "LineComment": 2,
      "LogicalExpressionOperator": 1,
      "MemberExpressionClosing": 0,
      "MemberExpressionOpening": 0,
      "MemberExpressionPeriod": 0,
      "ModuleSpecifierClosingBrace": 1,
      "ObjectExpressionClosingBrace": 0,
      "ObjectExpressionOpeningBrace": -1,
      "ObjectPatternClosingBrace": 0,
      "ObjectPatternComma": 0,
      "ObjectPatternOpeningBrace": 1,
      "ParameterComma": 0,
      "ParameterList": 0,
      "Property": 1,
      "PropertyValue": 1,
      "SwitchCaseColon": 0,
      "SwitchDiscriminantClosing": 0,
      "SwitchDiscriminantOpening": 1,
      "ThrowKeyword": 1,
      "TryClosingBrace": 1,
      "TryKeyword": -1,
      "TryOpeningBrace": 1,
      "UnaryExpressionOperator": 0,
      "VariableDeclarationSemiColon": 0,
      "VariableName": 1,
      "VariableValue": 1,
      "WhileStatementClosingBrace": 1,
      "WhileStatementConditionalClosing": 0,
      "WhileStatementConditionalOpening": 1,
      "WhileStatementOpeningBrace": 1
    },

    "after": {
      "ArgumentComma": 1,
      "ArgumentList": 0,
      "ArrayExpressionClosing": 0,
      "ArrayExpressionComma": 1,
      "ArrayExpressionOpening": 0,
      "ArrayPatternClosing": 1,
      "ArrayPatternComma": 1,
      "ArrayPatternOpening": 0,
      "ArrowFunctionExpressionArrow": 1,
      "ArrowFunctionExpressionClosingBrace": 0,
      "ArrowFunctionExpressionOpeningBrace": 0,
      "AssignmentOperator": 1,
      "AssignmentPattern": 1,
      "BinaryExpression": 0,
      "BinaryExpressionOperator": 1,
      "BlockComment": 1,
      "CallExpression": -1,
      "CallExpressionClosingParentheses": -1,
      "CallExpressionOpeningParentheses": -1,
      "CatchClosingBrace": 1,
      "CatchKeyword": 1,
      "CatchOpeningBrace": 1,
      "CatchParameterList": 0,
      "ClassClosingBrace": 1,
      "ClassOpeningBrace": 1,
      "CommaOperator": 1,
      "ConditionalExpressionConsequent": 1,
      "ConditionalExpressionTest": 1,
      "DoWhileStatementBody": 1,
      "DoWhileStatementClosingBrace": 1,
      "DoWhileStatementOpeningBrace": 1,
      "ElseIfStatementClosingBrace": 1,
      "ElseIfStatementOpeningBrace": 1,
      "ElseStatementClosingBrace": 1,
      "ElseStatementOpeningBrace": 1,
      "EmptyStatement": 0,
      "ExpressionOpeningParentheses": 0,
      "FinallyClosingBrace": 1,
      "FinallyKeyword": -1,
      "FinallyOpeningBrace": 1,
      "ForInStatement": 1,
      "ForInStatementClosingBrace": 1,
      "ForInStatementExpressionClosing": 1,
      "ForInStatementExpressionOpening": 0,
      "ForInStatementOpeningBrace": 1,
      "ForOfStatement": 1,
      "ForOfStatementClosingBrace": 1,
      "ForOfStatementExpressionClosing": 1,
      "ForOfStatementExpressionOpening": 0,
      "ForOfStatementOpeningBrace": 1,
      "ForStatement": 1,
      "ForStatementClosingBrace": 1,
      "ForStatementExpressionClosing": 1,
      "ForStatementExpressionOpening": 0,
      "ForStatementOpeningBrace": 1,
      "ForStatementSemicolon": 1,
      "FunctionDeclarationClosingBrace": 1,
      "FunctionDeclarationOpeningBrace": 1,
      "FunctionExpressionClosingBrace": 0,
      "FunctionExpressionOpeningBrace": 1,
      "FunctionName": 1,
      "FunctionReservedWord": 1,
      "IfStatementClosingBrace": 1,
      "IfStatementConditionalClosing": 1,
      "IfStatementConditionalOpening": 0,
      "IfStatementOpeningBrace": 1,
      "IIFEOpeningParentheses": 0,
      "LogicalExpressionOperator": 1,
      "MemberExpressionClosing": 0,
      "MemberExpressionOpening": 0,
      "MemberExpressionPeriod": 0,
      "MethodDefinitionName": 0,
      "ModuleSpecifierOpeningBrace": 1,
      "ObjectExpressionClosingBrace": 0,
      "ObjectExpressionOpeningBrace": 0,
      "ObjectPatternClosingBrace": 1,
      "ObjectPatternComma": 1,
      "ObjectPatternOpeningBrace": 0,
      "ParameterComma": 1,
      "ParameterList": 0,
      "PropertyName": 0,
      "PropertyValue": 0,
      "SwitchDiscriminantClosing": 1,
      "SwitchDiscriminantOpening": 0,
      "ThrowKeyword": 1,
      "TryClosingBrace": 1,
      "TryKeyword": -1,
      "TryOpeningBrace": 1,
      "UnaryExpressionOperator": 0,
      "VariableDeclarationSemiColon": 0,
      "VariableName": 1,
      "VariableValue": 0,
      "WhileStatementClosingBrace": 1,
      "WhileStatementConditionalClosing": 1,
      "WhileStatementConditionalOpening": 0,
      "WhileStatementOpeningBrace": 1
    }
  },

  // Custom plugins
  "plugins": [
    "esformatter-braces",
    "esformatter-dot-notation",
    "esformatter-eol-last",
    "esformatter-parseint",
    "esformatter-quotes",
    "esformatter-remove-trailing-commas",
    "esformatter-semicolons",
    "esformatter-var-each"
  ],

  "quotes": {
    "type": "single",
    "avoidEscape": false
  }
}
