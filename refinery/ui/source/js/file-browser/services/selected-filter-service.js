'use strict';

function selectedFilterService ($location, $window) {
  var vm = this;
  vm.selectedFieldList = {};
  vm.attributeSelectedFields = {};

  // Helper function encodes field array in an obj
  vm.encodeAttributeFields = function (attributeObj) {
    angular.forEach(attributeObj, function (fieldArray) {
      for (var ind = 0; ind < fieldArray.length; ind++) {
        fieldArray[ind] = $window.encodeURIComponent(fieldArray[ind]);
      }
    });
    return (attributeObj);
  };

  /**
   * Helper method which removes selected Field and deletes empty attributes
   * @param {string} attributeName - internal name,'Month_Characteristics_10_5_s'
   * @param {string} fieldName - field name
  */
  var removeSelectedField = function (attributeName, fieldName) {
    // remove attribute field
    var fieldIndex = vm.selectedFieldList[attributeName].indexOf(fieldName);
    if (fieldIndex > -1) {
      vm.selectedFieldList[attributeName].splice(fieldIndex, 1);
    }
    // If attribute has no field, remove the attribute key
    if (vm.selectedFieldList[attributeName].length === 0) {
      delete vm.selectedFieldList[attributeName];
    }
  };

  /**
   * Helper method which removes selected Field and deletes empty attributes
   * @param {string} attributeName - internal name,'Month_Characteristics_10_5_s'
   * @param {string} fieldName - field name
  */
  vm.addSelectedField = function (attributeName, fieldName) {
    // check to see if it already exists
    var fieldIndex = vm.selectedFieldList[attributeName].indexOf(fieldName);
    if (fieldIndex === -1) {
      vm.selectedFieldList[attributeName].push(fieldName);
    }
  };

  /**
   * Helper method which updates the url query with fields
   * @param {string} fieldObj - attribute obj with a the name of a field
   * @param {string} value - True adds name or null removes name
  */
  vm.updateUrlQuery = function (fieldObj, value) {
    $location.search(fieldObj, value);
  };

  /**
   * Update which attribute fields are selected in data-set browser. Used to
   * filter the solr_query response on back-end.
   * @param {obj} activeFields - Generated by ui-select with active field_names
   * and their boolean value (selected/unselected), {field_name: boolean}
   * @param {string} attribute - Attribute field's internal name,
   * 'Month_Characteristics_10_5_s'
   * @param {string} field - Field name, 'March'
   */
  vm.updateSelectedFilters = function (activeFields, attributeInternalName, field) {
    console.log('updateSelectedFilters');
    console.log(activeFields);
    // Check if attribute already exists in selectedFieldList
    if (activeFields[field] && vm.selectedFieldList[attributeInternalName]) {
      var attributeFieldSelected = {};
      attributeFieldSelected[attributeInternalName] = [field];
      var encodedSelection = vm.encodeAttributeFields(attributeFieldSelected);
      // checks if selected fields exists in the attibute object
      if (vm.selectedFieldList[attributeInternalName].indexOf(field) > -1) {
        vm.updateUrlQuery(JSON.stringify(encodedSelection), activeFields[field]);
      } else {
        vm.selectedFieldList[attributeInternalName].push(field);
        vm.updateUrlQuery(JSON.stringify(encodedSelection), activeFields[field]);
      }
    // Add new attribute to selectedFieldList
    } else if (activeFields[field]) {
      console.log('in the else if');
      vm.selectedFieldList[attributeInternalName] = [field];
      var attributeFieldSelected2 = {};
      attributeFieldSelected2[attributeInternalName] = [field];
      var encodedSelection2 = vm.encodeAttributeFields(attributeFieldSelected2);
      vm.updateUrlQuery(JSON.stringify(encodedSelection2), activeFields[field]);
    // remove empty fields
    } else if (vm.selectedFieldList[attributeInternalName]) {
      removeSelectedField(attributeInternalName, field);
      vm.updateUrlQuery(field, null);
    }
    return vm.selectedFieldList;
  };

   /**
   * Helper method which loops through deselected fields and updates lists
   * @param {obj} deselectedFields - Generated by ui-select with active
    * field_names, {name: false}
   */
  vm.resetAttributeFilter = function (deselectedFields) {
    angular.forEach(vm.selectedFieldList, function (fieldList, attribute) {
      var len = fieldList.length;
      for (var i = 0; i < len; i++) {
        vm.updateSelectedFilters(deselectedFields, attribute, fieldList[0]);
      }
    });
  };
}

angular.module('refineryFileBrowser')
  .service('selectedFilterService', [
    '$location',
    '$window',
    selectedFilterService
  ]
);
